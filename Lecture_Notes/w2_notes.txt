4) grep
- 문자열 matching
- 대소문자 구분함
- 라인 전체를 출력한다.

Q. The가 있는 txt 파일을 전체 조회하라 : *
A. grep The *.txt

- -v : (조건) 문자열이 없는 라인 출력

Q. /usr/lib 에 포함된 하위 디렉터리 개수 알아내기
A. ls -l /usr/lib | cut -c 1 | grep d | wc -l

5) sort
- 정렬, 오름차순 (abcd ....)
- -r (reverse)
- 숫자 정렬 (-n)
  sort -n -r sample.txt (O)
  sort -nr sample.txt (O)
  
Q. animals.txt 3번째 필드가 숫자 => 오름차순 정렬해서 출력하라.
A. cut -f 3 animals.txt | sort -n

Q. 최소값, 최대값 출력하기
A. 최소값 : cut -f 3 animals.txt | sort -n | head -n 1
   최대값 : cut -f 3 animals.txt | sort -n -r | head -n 1

Q. /etc/passwd 디렉터리에서 사용자 이름 정렬하여 출력하기
A. head /etc/passwd | cut -d : -f 1 | sort
- : 로 구분된 필드 중 1번째 필드가 사용자 이름

Q. /etc/passwd 디렉터리에서 사용자 이름 전체 출력하기
A. cut -d : -f 1 /etc/passwd | sort

Q. 사용자 중 root가 있는지 확인하기
A. head /etc/passwd | cut -d : -f 1 | grep -w root
- Root, root, ROOT
- root 'abcdroot'
- _root_ => -w
- roota, bayroot, root 에서 "root" 단어만 원할 경우 grep -w root 이용

Q. ls /etc/passwd , head /etc/passwd 결과값 다른 이유
A : ls는 디렉터리 표시, head는 파일 내용 표시

# letters 내용 조회하기
6) uniq
- 중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만

Q. 성적표 (grades 파일) 에서 가장 빈번하지 않은 등급부터 출력하기
A. sort grades | cut -f 1 | uniq -c | sort | rev | cut -c 1

AAACCCCBBBAAA
- sort -> uniq
  : AAAAAABBBBCCCC -> ABC
- uniq -> sort
  : ACBA -> AABC

---------------------------------

#1. 버전 관리
- 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템
- 협업
- 툴 : 깃

#2 깃
- 데이터 저장 방식 : 스냅샷
- 오프라인 가능
  - if 빈 파일 -> 텍스트 입력 -> 빈 파일
  - 키(key) - 벨류(value)
    - 키는 고유하다. (해시)
    - 벨류 (텍스트)

- 깃 상태
  - 수정 : 파일이 변경된 상태
  - 커밋 : 저장(스냅샷 찍기)
  - 스테이지 : 스냅샷 찍어서 커밋할 준비가 된 상태

  - 수정
  - 스테이징 => 커밋

  "스테이지 안 한 채로 커밋할 수 없다!"

  - 깃 커밋 순서 : 
    상태 체크 -> (수정) -> 스테이징 -> 커밋
    ....

1) 버전 체크
- git --version
  * git -v --version
  ls -l
  ls --list (X)

2) 사용자 정보 설정하기
- name
- email
- 옵션 : --global : 전체 시스템에 영향을 준다.
  - 프로젝트마다 다른 이름을 사용하고 싶을 경우는 옵션을 제외

- core.editor
  - vi 빠져나올 때는 :q + enter

- git help <프로그램명>

# 디렉터리 (directory)
- 현재 디렉터리 : working directory, current directory
- 우리가 말하는 "폴더"
- 트리구조를 가짐
  animals/
    ㄴ name.txt
    ㄴ age.txt
    mammals/
      ㄴ cow.txt
    reptile/
      
      
- 하위 디렉터리 (child) - animals > mammals
  name.txt -> 파일
- 상위 디렉터리 (parent) - mammals > animals
- 형제 디렉터리 (sibling) - mammals, reptile

- /로 구분함
  animals/mammals/cow.txt
  <디렉터리 / .... / 파일명>
-/ : 루트 디렉터리

- 절대경로 : 루트에서부터 시작
- 상대경로 : 현재 기준
  - 나의 현재 위치가 mammals이다. 근데 위로 가고 싶다.
    1) 절대경로 : /........ d
    2) 상대경로 :
      .. : 부모 디렉터리
      . : 현재
  - cd : change directory

    예 : cd ./mammals
        cd ..
- pwd, cd
- ..   .
- mkdir

Q. new_dir로 이동해서 디렉터리 "dir2" 만들어보기

3) 깃 초기화
  git init : .git 에 모든 변경사항(스냅샷)이 저장된다.

4) 상태 체크
  git status

  깃이 모르는 파일일 경우
  untracked -> 'add' -> tracked

  add -> commit

  [main (root-commit) 4497cd5] init commit
   1 file changed, 7 insertions(+)
   create mode 100644 animals.txt

   - branch 정보 : main
   - 4497cd5 - 키 정보
   - init commit - 메시지
   1 file changed, 7 insertions(+) : 변경사항

- git status
- git add <파일명>
- git commit -m <메시지>

<수정 사항>

-git status
-git add <파일명>
-git commit -m <메시지>